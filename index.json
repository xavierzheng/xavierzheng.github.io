[{"content":"Transcription factor binding site Transcription factor binding site是實驗能證明的區域，這段序列能與transcription factor 結合，進而開啟或關閉基因表現。本文沒有要強調Transcription factor binding site如何尋找或進行實驗驗證，僅介紹如何描述這段transcription factor binding site。\n字串描述 最簡單的描述方法是CCATATATAG 這樣的單純字串描述，如下圖所示 （https://jaspar.genereg.net/sites/MA0001.1/）\n這種顯示方式最直觀，也最好利用，大家可以想像只要使用Ctrl + F或grep等方式進行搜尋。\n正規表示法描述 有些位置如果有超過一種以上的DNA出現，這時候單純用ATCGU表現就不太方便了。目前IUPAC有訂立一系列標準用字去描述這些可能性，請參考 https://en.m.wikipedia.org/wiki/Nucleic_acid_notation ，就像R代表purine，包含AG。而Y代表Pyrimidine，包含CT等等。\nPosition weight matrix (PWM) 其實，transcription factor binding site的專一性很少有達到需每一個base都正確才有效能。通常transcription factor binding site是由一堆可能性堆疊而成，它描述了每個位置出現的ATCG頻率。以下圖左邊為例，直的column 代表每個位置，而橫的row代表ATCG，所以矩陣裡面的數值就是每個位置 （column）裡，ATCG出現的頻率。以第一個位置而言，看起來C出現的頻率最高，但Q或G仍有出現之可能。\nPMW DNAlogo Ref. https://jaspar.genereg.net/matrix/MA0001.1/?revcomp=1\n通常這種描述太數學了，如果想更視覺化一點，我們會把這些序列轉成DNAlogo的型態來描述，如上圖右側所示，因為第一個位置C出現的機率遠大約於其他核酸，所以就會看到一根很大的C。\n好，那position weighted matrix看起來最實際，但該怎樣用它來搜尋全基因體，或是promoter region呢？\nMEME package FIMO找序列 簡單暴力解，MEME package 裡面的FIMO專做這件事情 (https://meme-suite.org/meme/tools/fimo)，只要有PWM，並改成MEME家的格式，餵給FIMO，再給一段序列，FIMO就能幫忙尋找這段PWM是否存在給定序列裡了。\n這樣有簡單的輸出結果可以參考 https://meme-suite.org/meme/doc/examples/fimo_example_output_files/fimo.html 。MEME package 最貼心的是，他會在最下面列出現在使用的指令是什麼，你可以使用這指令在自己的電腦上重現這些結果\n# Command line: Fimo –oc fimo_example_output_files –parse-genomic-coord some_vertebrates.meme mm9_tss_500bp_sampled_1000.fna # Settings: Output_directory = fimo_example_output_files\tMEME file name = some_vertebrates.meme\tsequence file name = mm9_tss_500bp_sampled_1000.fna Background file name = --nrdb--\talphabet = DNA\tmax stored scores = 100000 Allow clobber = true\tcompute q-values = true\tparse genomic coord. = true Text only = false\tscan both strands = true\tmax strand = false Threshold type = p-value\toutput theshold = 0.0001\tpseudocount = 0.1 Alpha = 1\tverbosity = 2\tMEME package MEME建立PWM 那如何建立PMW呢？最棒的方法是用multiple sequence alignment，真實的看到了某堆序列裡，真的有一段conserved sequence (高度保留序列)，我們再拿這個高度保留序列製成PMW。但這挑戰性極高，DNA multiple sequence alignment 沒那麼好做，所以簡單做法是透過生物實驗，像是RNA sequence找出coexpression network，或是用kmean把具有一致expression patterns 的基因們打撈出來，甚至做chip seq，直接測量蛋白質與DNA的結合。最後再拿這些資料給MEME，讓他幫忙找在這些序列裡是不是真的藏有一些短片段。\n注意：MEME定義的PMW motif有兩大前提假設，第一是gapless，也就是禁止出現gap。第二，長度要一致。也就是說MEME如果發現兩個長度不一致的motif，它會直接定義成兩個motif\n實際範例：https://meme-suite.org/meme/doc/examples/meme_example_output_files/meme.html?man_type=web\nmeme lex0.fna -oc meme_example_output_files -dna -mod zoops -nmotifs 3 -revcomp -mpi 背後原理 MEME背後是進行EM (Expectation-Maximization Algorithm)。實際範例可以參考 RNA motif discovery: a computational overview | Biology Direct | Full Text (biomedcentral.com)。下圖A是一個典型的PMW，而圖B是實際應用。X代表序列，而Z代表有沒有搜尋到motif，0代表沒有，1代表有，且紅色的序列就代表了motif。由於第一個位置與許A與G的機率很高，所以可以看到A、G都能當成第一個序列\n","permalink":"https://xavierzheng.github.io/posts/tfbindingsite/","summary":"描述TF binding site與簡單預測的方法，包含regulatory sequence, position weight matrix, MEME","title":"Transcription factor binding site的基礎概念"},{"content":"用HUGO和github製作靜態網站 動態網站雖然互動性極高，但很多時候網頁只是單純拿來乘載資訊，沒那麼多互動性其實也沒關係。這裡簡單介紹可以用markdown格式，直接利用HUGO製作成網頁，再利用github免費託管網頁的方法\n安裝HUGO MAC用戶直接用brew install。這裡介紹linux，以及透過windows subsystem linux 2 (WSL2)的安裝方法，尤其windows用戶，WSL2真的是好東西啊。\n簡單說，參考原廠說明 Linux |Hugo (gohugo.io) ，有兩種安裝方法，分別是簡易版、與純手工安裝版\n簡易版 sudo apt install hugo 純手工安裝 pre-required: GCC 記得要有gcc，不太挑版本，Ubuntu預設的就可以。但WSL2的Ubuntu通常沒有，所以需先更新apt，再自己裝:\n# 更新apt sudo apt update # 裝gcc sudo apt install build-essential pre-required: GO 手動裝的方法: 下載、解壓縮、把路徑加入.bashrc、在.bashrc設定 GOPATH 與 GOBIN ，這樣才知道透過GO 裝的東西會裝去哪裡 (未來透過 GO 安裝的執行檔就在 GOBIN 的位置)\n# 下載 wget https://go.dev/dl/go1.19.4.linux-amd64.tar.gz # 解壓縮 tar zxvf go1.19.4.linux-amd64.tar.gz # 修改.bashrc cd vim .bashrc # 把路徑加入.bashrc PATH=${PATH}:/home/XXXXXXXX/software/GO/1.19.4/bin # add GOPATH and GOBIN PATH to .bashrc GOPATH=\u0026#34;/home/XXXXXXXX/go\u0026#34; GOBIN=\u0026#34;/home/XXXXXXXX/go/bin\u0026#34; # 改完之後記得source .bashrc 才會生效 source .bashrc 安裝HUGO 我選擇透過 GO 安裝:\ngo install -tags extended github.com/gohugoio/hugo@v0.109.0 安裝完畢之後，執行檔會在上面設定的 GOBIN (/home/XXXXXXXX/go/bin)裡面，記得把HUGO執行檔再加入PATH裡:\n# 修改.bashrc cd vim .bashrc # 把路徑加入.bashrc PATH=${PATH}:/home/XXXXXXXX/go/bin # 改完之後記得source .bashrc 才會生效 source .bashrc 然後在terminal 輸入\n$ hugo version hugo v0.109.0+extended linux/amd64 BuildDate=unknown 看到顯示 hugo v0.109.0+extended linux/amd64 BuildDate=unknown 就是成功啦\n設定github SSH key 建議使用ssh key來連接，別再暴露自己的密碼啦!!\n# 雙引號裡面填入自己的github email ssh-keygen -t ed25519 -C \u0026#34;寫入你的github註冊email\u0026#34; # PS. ed25519 是加密的方法，不是帳號也不是密碼 產生出來的公鑰與私鑰通常會放在 /home/XXXXXXXXXXX/.ssh/id_ed25519.pub ，記得把這串公鑰貼到github上面，這樣未來就不用透過密碼連接了。\n開啟一個github repository 原則上只要建立一個名字叫做 \u0026lt;USERNAME\u0026gt;.github.io 的repository 來盛放 HUGO 做好的網頁資料就好。記得這個命名原則有限制，好像不能亂取名字? HUGO 官方的說法是有兩種做法，第一種就是用使用者名稱，第二種可以利用USERNAME與project名稱:\nUser/Organization Pages (https://\u0026lt;USERNAME|ORGANIZATION\u0026gt;.github.io/) Project Pages (https://\u0026lt;USERNAME|ORGANIZATION\u0026gt;.github.io/\u0026lt;PROJECT\u0026gt;/) 詳細請看: https://gohugo.io/hosting-and-deployment/hosting-on-github/\n使用HUGO Step 1. 利用HUGO開一個資料夾，放所有會用到的東西 假設想要開一個資料夾，名字是 myblog ，而且設定檔以yaml 格式顯示:\n# hugo new site \u0026lt;name of site\u0026gt; -f yml hugo new site myblog -f yml 這時候會在 myblog 資料夾裡出現這些資料夾與檔案:\narchetypes\t# 這是markdown的範例檔頭，請自己手工做，或複製theme做好的 assets config.yml\t# 這是設定檔 content # 寫好的markdown都放這裡 data layouts public\t# 這邊是hugo從content markdown做好的所有網頁資訊 resources static themes\t# 放下載好的主題 Step 2. 找個喜歡的網頁主題 (theme)放進theme資料夾 可以在這裡找，看看裡面的範例喜不喜歡，看GitHub Stars數值高不高，看使用說明書寫的簡不簡單，夠選擇障礙很久了\n各式各樣theme: Complete List |Hugo Themes (gohugo.io)\n舉例來說，我以PaperMod |Hugo Themes (gohugo.io) 為範例:\nStep 2.1 下載theme 記得在 myblog/theme 資料夾裡執行這動作，因為要把東西放進 theme 資料夾\ngit clone https://github.com/adityatelange/hugo-PaperMod themes/PaperMod --depth=1 這時候就可以測試看看主題是不是跟想像的一樣:\nhugo server 就可以透過瀏覽器看看自己部屬的網頁對不對了。而且就算是WSL開啟網頁，也可以透過windows的瀏覽器直接看!!!!! 實際用法是打開瀏覽器，輸入http://localhost:1313/ 就可以啦。\nStep 2.2 Add theme to archetypes 這是為了讓接下來的文章能按照一定的格式顯示，所以需要一個模板，所以我參考 Installation | Update | PaperMod (adityatelange.github.io) ，最後面有介紹他使用的。簡單說，在 archetypes 資料夾建立一個新的檔案 post.md ，再把下面這些東西貼上去，之後就可以直接套用了\n記得也可以自己改阿!!\nvim archetypes/post.md ## add following texts: --- title: \u0026#34;{{ replace .Name \u0026#34;-\u0026#34; \u0026#34; \u0026#34; | title }}\u0026#34; date: {{ .Date }} # weight: 1 # aliases: [\u0026#34;/first\u0026#34;] tags: [\u0026#34;first\u0026#34;] # add tags here!!!!! author: \u0026#34;Me\u0026#34; # author: [\u0026#34;Me\u0026#34;, \u0026#34;You\u0026#34;] # multiple authors showToc: true TocOpen: false draft: false hidemeta: false comments: false description: \u0026#34;Desc Text.\u0026#34; canonicalURL: \u0026#34;https://canonical.url/to/page\u0026#34; disableHLJS: true # to disable highlightjs disableShare: false disableHLJS: false hideSummary: false searchHidden: true ShowReadingTime: true ShowBreadCrumbs: true ShowPostNavLinks: true ShowWordCount: true ShowRssButtonInSectionTermList: true UseHugoToc: true cover: image: \u0026#34;\u0026lt;image path/url\u0026gt;\u0026#34; # image path/url alt: \u0026#34;\u0026lt;alt text\u0026gt;\u0026#34; # alt text caption: \u0026#34;\u0026lt;text\u0026gt;\u0026#34; # display caption under cover relative: false # when using page bundles set this to true hidden: true # only hide on current single page editPost: URL: \u0026#34;https://github.com/\u0026lt;path_to_repo\u0026gt;/content\u0026#34; Text: \u0026#34;Suggest Changes\u0026#34; # edit text appendFilePath: true # to append file path to Edit link --- Step 2.3 改config.yml 這是網頁的位置資訊，與使用的theme資訊、網頁名稱等等，記得要改阿。然後#之後的東西不要留\nbaseURL: https://xavierzheng.github.io\t# 改成自己的網頁名字 languageCode: zh-tw\t# 文字碼 title: Biology and computer science\t# 網頁名稱 theme: PaperMod\t# 使用的theme的名字 Step 3 寫markdown啦 使用以下指令，利用剛剛創好的 archetypes/post.md 當作模板，寫文章啦\nhugo new --kind post posts/TEST.md 這時候會利用模板 --kind post，在 content 資料夾底下，開一個檔案 posts/TEST.md。也就是在 content 資料夾底下，會多一個posts 資料夾，裡面放想寫的markdown。\n內容自己寫好貼進來吧。但檔頭部分，可以修改tags，讓之後文章好搜尋。也可以添加description或summary，這段文字會出現在主網頁內，可以當這篇文章的一句話摘要\ntags: [\u0026#34;first\u0026#34;, \u0026#34;GO\u0026#34;, \u0026#34;info\u0026#34;, \u0026#34;不要再寫啦\u0026#34;] description: \u0026#34;XXXXX\u0026#34; summary: \u0026#34;XXXXX\u0026#34; Step 3.1 如果要插入圖片 hugo 預設圖片資料存在 static資料夾，所以只要把typora或其他markdown editor創造出來的圖片資料夾與圖片搬到 static 資料夾底下，就可以直接在網頁上顯示了。\n這是資料夾結構\nstatic |- TFBindingSite.assets/ |- clip_image002.jpg |- clip_image002.png ...... 只要把markdown裡面的圖片位置改成\n![String](/TFBindingSite.assets/clip_image002.jpg) 就直接可以在typora裡面顯示，也可以正確的被hugo處理成網頁能看懂的格式啦\nStep 4 預覽 透過HUGO把markdown轉成網頁，並在localhost用網頁瀏覽器先看看有沒有問題。這就是HUGO最厲害的地方，編譯速度超快，通常不用1秒!!!\nhugo server -D 就可以透過瀏覽器看看自己部屬的網頁對不對了。而且就算是WSL開啟網頁，也可以透過windows的瀏覽器直接看!!!!! 實際用法是打開瀏覽器，輸入http://localhost:1313/ 就可以啦。\nStep 5 轉換markdown to html 只要簡單一行指令\nhugo 東西就更新到public資料夾啦\nStep 6. 放上github託管 上面做完的網頁資料都在 public 資料夾，所以只需要把 public 資料夾裡面的內容放進github就可以，記得不要把 public 資料夾一起放上去，只能放資料夾裡面的東西!!\n# 一定要進入到public底下再開始git init cd public # 開始git (這個步驟只有第一次才需要做) git init # 加全部東西進入git git add . # 推到local git commit -m \u0026#34;first commit\u0026#34; git branch -M main git remote add origin git@github.com:xavierzheng/xavierzheng.github.io.git git push -u origin main 記得要改 git@github.com:xavierzheng/xavierzheng.github.io.git 阿\n這樣就完成blog啦\n幫我衝一下點閱率: Biology and computer science (xavierzheng.github.io)\n每次寫文章只需執行Step 3、Step 4、Step 5、Step 6就可以 其餘步驟通通不用做!!\n當然也可以簡單做成一個執行檔，未來直接執行它就可以啦 ./git_push.sh\n#!/bin/bash set -e -u -o pipefail hugo cd public # 記得改成放網頁的地方啊 git add . git commit -m \u0026#34;first commit\u0026#34; git branch -M main git push -u origin main ","permalink":"https://xavierzheng.github.io/posts/%E7%94%A8hugo%E5%92%8Cgithub%E8%A3%BD%E4%BD%9C%E9%9D%9C%E6%85%8B%E7%B6%B2%E7%AB%99/","summary":"簡單介紹如何用HUGO和GITHUB製作靜態網站","title":"用HUGO和github製作靜態網站"},{"content":"GO注意事項 Ref: Nine quick tips for pathway enrichment analysis, 2022 PLOS computation biology, https://doi.org/10.1371/journal.pcbi.1010348\nTip 1: Before starting, clarify which analysis you would like to perform What analysis type Pathway enrichment analysis (PEA) does not give clues about the active or inhibited status of the pathways. More appropriately, PEA provides information about how genes help carry out pathways.\noverrepresentation analysis (ORA) focus of ORA methods is the gene set\nORA outputs all pathways enriched in the query gene list as a whole, and mainly uses a nonranked list\n(except one option in g:Profiler g:GOst using a minimum hypergeometric value-based method).\ngene set enrichment analysis (GSEA) approaches 代表某一個pathway在transcriptome資料裡面有enrich focus of GSEA techniques is the ranked pathways list it is advisable to choose GSEA methods when there is uncertainty about the cutoff value. GSEA indicates the pathways that are enriched in genes located at both extreme ends of a ranked gene list, and a higher ranked pathway indicates that more genes are located at the very top or at the very end of this list competitive methods: BioPAX-Parser (BiP) [35] pathDIP [36,37] SPIA [38] CePaORA [39] PathNet [40] self-contained methods: CePa [39] GSEA [25–27] Which data type For unordered lists of genes, researchers can use g:Profiler g:GOSt [8–10], Enrichr [28,29], and BioPAX-Parser [35,47]. If the genes are ranked, g:Profiler g:GOSt can treasure this information and generate rank-based functional enrichment results. **If the input data are gene expression levels, they can be analyzed through GSEA [27]. ** 如果是expression level, 可以直接用GSEA pathDIP [37], instead, can assist with curated analyses based on scientific literature. Tip 2: Ensure the quality of your input genes or genomic regions 請確定放進去的是對的ID，有意義的list，有意義的expression\nTip 3: Use multiple PEA tools, not only one we suggest all the practitioners performing a functional enrichment analysis phase to employ at least two different PEA tools\nif the user had an unranked list of gene symbols, we would suggest to apply g:Profiler g:GOSt [10], Enrichr [28], and GeneTrail [52] to it, and then compare their results. To perform pathway enrichment by employing more than a single database, users can employ cPEA [48], a software tool able to deal with several pathway databases using the BioPAX language [61] to store and represent pathways. Or they can use BiP [47] by selecting the “Whole PathwayCommon Data” option that will perform cross enrichment using the whole collection of automatically downloaded locally Pathway Common databases [62] coded in BioPAX. Tip 4: Document all your PEA tests and their details 記得要寫好筆記，所有使用的參數以及資料庫的版本都要清楚寫下來，這是dry lab的實驗紀錄\nBox 1: Example of PEA test details My test ID: 2022-02-04, h10:02 EST. My input genes: AK4, ALDOC, EGLN1, FAM162A, MTFP1, PDK1, PGK1. My input genes’ type: gene symbols. Source: D. Cangelosi and colleagues [69]. Disease: neuroblastoma. Tool: g:Profiler g:GOSt. Access: online via Google Chrome browser. Version: e104_eg51_p15_3922dba. URL: https://biit.cs.ut.ee/gprofiler/gost Organism: Homo sapiens. Query: unordered genes. Statistical domain scope: only annotated genes. Significance threshold: g:SCS threshold. User threshold: 0.005. Data sources: default. All the other parameters: default. My output file(s) name(s): gprofiler_gost_NB_2022-02-04_h1002_output.csv My output file(s) folder: /home/davide/PEA_analyses/neuroblastoma/ My output file(s) location: bioinformatics-laptop-2021 (Dell Latitude E5420). Tip 5: Always use the corrected p-value, and not the nominal one terms adjusted p-values, corrected p-values, and false discovery rate (FDR) values are often used as synonyms in the scientific literature we suggest using the adjusted p-value threshold at 0.005 (that corresponds to 5 × 10−3), as recommended by Benjamin and colleagues [75]. We therefore suggest using the p.adj \u0026lt; 0.005 threshold for a first strict analysis of the results, and then repeating the test by using a more permissive threshold such as p.adj \u0026lt; 0.01, and then again with an even higher threshold, such as the traditional p.adj \u0026lt; 0.05. Based on the characteristics of the experiment, results found by one particular threshold might be more suitable than results found with other thresholds. 記得從嚴格到寬鬆的原則 Tip 6: Keep in mind that your PEA results can be strongly affected by the statistical tests and the visualization techniques you use Statistical tests. 統計方法不一樣，會得到不一樣的結果 沒有最適合的方法，只有適合你實驗設計的方法 Visualization Enrichment Maps [80] and enrichplot [81] for biological pathways, AutoAnnotate [82] for networks, REVIGO [83] and CirGO [84] for GO annotations are few examples of different visualization techniques and contents. Network visualization techniques can also be used to detect a lower adjusted p-value threshold (Tip 5). Tip 7: Consider using subgroups of correlated genes instead of all your input genes Instead of using all genes as input for the PEA, we therefore suggest bioinformatics practitioners to detect subgroups of correlated genes and perform the PEA on each of these subgroups alone.\n不要一口氣全部做，可以考慮subgroup\nSubgroups of correlated genes can be found, for example, through protein–protein interaction networks’ tools such as IID [85–88], STRING [89–92], GeneMANIA [93–97], or Reactome Functional Interaction Network (Reactome FI) [98,99]. some R packages have been recently released: pathfindR [102] and netGO [103], which exploit the protein–protein interaction networks to produce more accurate PEA results. Tip 8: Use the (recent) scientific literature to review your PEA results we therefore suggest any practitioner to manually perform a literature search and look for scientific studies published about the significant genes–pathways associations found by the functional enrichment analysis and about the role of the genes inside the enriched pathways found.\n請找paper確定文獻是否更新\nTip 9: Ask a wet lab biologist or a clinician to review your PEA results a wet lab biologist or a clinician should review these results and clearly say if they make sense or if they contain mistakes or inappropriate information.\n請找專家用眼睛看\n","permalink":"https://xavierzheng.github.io/posts/tips-go/","summary":"Guideline for GO and GSEA analysis","title":"Tips for GO analysis"}]